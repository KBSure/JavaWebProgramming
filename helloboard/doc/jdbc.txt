java.sql 패키지를 이용한 Database프로그래밍을 JDBC 프로그래밍이라고 합니다.

java.sql의 핵심인터페이스를 보면, 구현하는 클래스를 자바는 제공하지 않는다.

java를 만든 사람들은 DBMS와 상관없이 같은 방법으로 프로그래밍을 하길 원했다.

- 데이터베이스 프로그래밍에 대한 인터페이스를 정의하였다.
- DBMS마다 구현하는 방법은 다르다. 그렇다면?
  DB제작사에서 해당 인터페이스를 구현한 클래스를 제공한다. --> JDBC 드라이버(*.jar)

         <dependency>
             <groupId>mysql</groupId>
             <artifactId>mysql-connector-java</artifactId>
             <version>5.1.41</version>
         </dependency>

-------------------------------------------------

데이터베이스 프로그래밍은 어떻게 하는가?

1-1) DB접속
   Class.forName("드라이버 클래스 이름"); // DBMS마다 이름이 다르다.
   // dburl은 DBMS마다 형식이 다르다. jdbc db url
   // db연셜이 성공하면 Connection을 구현하는 객체가 리턴된다.
   Connection conn = DriverManager.getConnection(dburl, dbid, dbpassword);

spring.datasource.driver-class-name=com.mysql.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/helloboard?useUnicode=true&characterEncoding=utf8
spring.datasource.username=fastcamp
spring.datasource.password=fastcamp

1-2) DB접속 2먼째 방법
    // javax.sql.DataSource인터페이스를 구현하고 있는 객체를 이용하여
    // 커넥션을 얻는다.
    // DataSource -----> 커넥션풀객체(Connection들을 여러개 가짐) -----> DB
    // DataSource를 구현한 객체가 필요합니다.
    DataSource dataSource = .....;
    Connection conn = dataSource.getConnection();


        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-dbcp2</artifactId>
            <version>2.1.1</version>
        </dependency>
        DataSource구현을 하고 있고 커넥션 풀이라고도 부른다.
        DB에 연결하기 위해서는 Driver를 사용합니다.

2) SQL을 준비한다. (문자열로 준비)

    // role_id가 자동으로 생성된다면 다음과 같이 insert
    insert into ROLE( description ) values ( 'ADMIN')
    // role_id가 자동으로 생성되지 않는다면
    insert into ROLE (role_id, description) values ( 500, 'ADMIN' );
    // 프로그래밍을 한다.
    // 나쁜 예제 : + 연산자로 sql을 작성한다. SQL Injection 을 당할 수 있다. 성능이 느려진다.
    // DBMS에서 SQL을 실행하면, DBMS는 SQL을 분석한 후 실행한다. 분석하는 시간이 오래걸린다.
    // 완전히 동일한 SQL은 이미 분석한 결과를 사용하여 실행한다. 분석을 한 결과는 캐싱에 남기 때문에.....
    String sql = "insert into ROLE (role_id, description) values ( " + id + ", '" + description + "' )";

    // 좋은 예제
    // 물음표 부분만 제외하고 분석된다. 개발자는 이 물음표에 나중에 값을 채운 후 실행한다.
    // 물음표에 값을 채우는 것을 바인딩한다. 물음표의 순서는 1부터 시작한다.
    String sql = "insert into ROLE (role_id, description) values ( ?, ? )";

   mysql> desc ROLE;
   +-------------+--------------+------+-----+---------+-------+
   | Field       | Type         | Null | Key | Default | Extra |
   +-------------+--------------+------+-----+---------+-------+
   | role_id     | int(11)      | NO   | PRI | NULL    |       |
   | description | varchar(100) | YES  |     | NULL    |       |
   +-------------+--------------+------+-----+---------+-------+
   2 rows in set (0.00 sec)

3) DB에서 SQL을 실행할 준비를 시킨다.

   PreparedStatement ps = conn.prepareStatement(sql);
   // 물음표부분을 바인딩한다. 각각의 type에 맞게
   ps.setInt(1, 500); // 첫번째 물음표에 500을 설정
   ps.setString(2, "ADMIN") // 두번째 물음표에 ADMIN설정

3) SQL이 준비가 되었다면, SQL을 실행한다.

   ps.execute();
   int count = ps.executeUpdate(); // insert, update, delete sql을 실행
   ResultSet rs = ps.executeQuery(); // select를 실행.   ( 0, 1건이 나올 경우 ) , 0건이상

4-1) 0, 1건 Select일 경우
    ResultSet은 select한 결과를 참조하는 인터페이스이다.ps.executeQuery()가실행되면, 실행된 결과는 DBMS에 있다.

    // 한건을 읽어온다. 한건이라는 것은 record를 말한다. 여기서 record란 select다음에 나온 컬럼들을 말한다.
    // 읽어오지 못하면 false를 반환하고, 읽어오면 true를 반환한후 다음 레코드를 참조한다.
    if(rs.next()){ // 한건의 record를 읽어온다. select role_id , description from ROLE where role_id = ?
        int roleId = rs.getInt(1); // 첫번째 컬럼의 값을 읽어온다.
        String description = rs.getString(2); // 두번째 칼럼의 값을 읽어온다.
    }
4-2) 0건이상 Select일 경우
    while(rs.next()){ // 한건의 record를 읽어온다. select role_id , description from ROLE
        int roleId = rs.getInt(1); // 첫번째 컬럼의 값을 읽어온다.
        String description = rs.getString(2); // 두번째 칼럼의 값을 읽어온다.
    }

마지막 순서 ) ResultSet을 close(), PreparedStatement를 close(), Connection을 close();
finally에서 하거나 try - with -resources구문을 이용하거나 한다.